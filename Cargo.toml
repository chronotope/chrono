[package]
name = "chrono"
version = "0.5.0-alpha.1"
description = "Date and time library for Rust"
homepage = "https://github.com/chronotope/chrono"
documentation = "https://docs.rs/chrono/"
repository = "https://github.com/chronotope/chrono"
keywords = ["date", "time", "calendar"]
categories = ["date-and-time"]
readme = "README.md"
license = "MIT OR Apache-2.0"
include = ["src/*", "tests/*.rs", "LICENSE.txt", "CITATION.cff"]
edition = "2021"
rust-version = "1.61.0"

[lib]
name = "chrono"

[features] # Don't forget to adjust `ALL_NON_EXCLUSIVE_FEATURES` in CI scripts when adding a feature or an optional dependency.
default = ["clock", "std"]
# Enable features that depend on allocation (primarily string formatting).
alloc = []
# Implements `TryFrom<SystemTime>` and `std::error::Error` for error types, implies of `alloc`.
std = ["alloc"]
# Enables reading the local timezone (`Local`), implies `now`.
clock = [
  "dep:windows-targets",
  "dep:iana-time-zone",
  "dep:android-tzdata",
  "now",
]
# Enables reading the system time (`now()`), on most platforms using the standard library.
now = []
# Enable features that depend on allocation (primarily string formatting).
serde = ["dep:serde"]
# Note that rkyv-16, rkyv-32, and rkyv-64 are mutually exclusive.
# Enable serialization/deserialization via rkyv, using 16-bit integers for integral `*size` types.
rkyv-16 = ["dep:rkyv", "rkyv?/pointer_width_16"]
# Enable serialization/deserialization via rkyv, using 32-bit integers for integral `*size` types.
rkyv-32 = ["dep:rkyv", "rkyv?/pointer_width_32"]
# Enable serialization/deserialization via rkyv, using 64-bit integers for integral `*size` types.
rkyv-64 = ["dep:rkyv", "rkyv?/pointer_width_64"]
# Enable rkyv validation support using `bytecheck`.
rkyv-validation = ["dep:rkyv", "rkyv?/bytecheck"]
# Construct arbitrary instances of a type with the arbitrary crate.
arbitrary = ["dep:arbitrary"]
# Interface with the JS Date API for the `wasm32` target.
wasmbind = ["dep:wasm-bindgen", "dep:js-sys"]
# Enable localization. This adds various methods with a `_localized` suffix.
unstable-locales = ["dep:pure-rust-locales"]

[dependencies]
serde = { version = "1.0.99", default-features = false, optional = true }
pure-rust-locales = { version = "0.8", optional = true }
rkyv = { version = "0.8.10", default-features = false, optional = true }
arbitrary = { version = "1.0.0", features = ["derive"], optional = true }

[target.'cfg(all(target_arch = "wasm32", not(any(target_os = "emscripten", target_os = "wasi"))))'.dependencies]
wasm-bindgen = { version = "0.2", optional = true }
js-sys = { version = "0.3", optional = true }       # contains FFI bindings for the JS Date API

[target.'cfg(windows)'.dependencies]
windows-targets = { version = "0.52", optional = true }

[target.'cfg(windows)'.dev-dependencies]
windows-bindgen = { version = "0.55" } # The MSRV of its windows-metatada dependency is 1.70

[target.'cfg(unix)'.dependencies]
iana-time-zone = { version = "0.1.45", features = ["fallback"], optional = true }

[target.'cfg(target_os = "android")'.dependencies]
android-tzdata = { version = "0.1.1", optional = true }

[dev-dependencies]
serde_json = { version = "1" }
serde_derive = { version = "1", default-features = false }
bincode = { version = "1.3.0" }

[target.'cfg(all(target_arch = "wasm32", not(any(target_os = "emscripten", target_os = "wasi"))))'.dev-dependencies]
wasm-bindgen-test = "0.3"

[package.metadata.docs.rs]
features = ["arbitrary", "rkyv", "serde", "unstable-locales"]
rustdoc-args = ["--cfg", "docsrs"]

[package.metadata.playground]
features = ["serde"]
