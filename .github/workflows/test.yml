name: All Tests and Builds

on:
  push:
    branches: [main]
  pull_request:
    paths:
      - "**.rs"
      - .github/**
      - .ci/**
      - xtask/**
      - Cargo.toml
  schedule:
    - cron:  '30 5 * * *' # run this daily to pick up any issues due to tzdb updates

jobs:
  test_full:
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-latest, macos-latest, windows-latest]
        rust_version: ["1.38.0", "stable"]
        test_style: ["all_tzs", "check_features_powerset"]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_version }}
          override: true

      - uses: Swatinem/rust-cache@v1
      - name: Build and Test
        run: cargo run --package xtask -- test
        env:
          TEST_STYLE: ${{ matrix.test_style }}
          RUST_VERSION: ${{ matrix.rust_version }}

  test_basic:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust_version: ["beta", "nightly"]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install rust with no_std toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Build and Test
        run: cargo run --package xtask -- test
        env:
          TEST_STYLE: basic
          RUST_VERSION: ${{ matrix.rust_version }}

  no_std:
    strategy:
      matrix:
        os: [ubuntu-latest]
        target: [thumbv6m-none-eabi, x86_64-fortanix-unknown-sgx]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install rust with fortanix sgx toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          target: ${{ matrix.target }}
          override: true
      - uses: Swatinem/rust-cache@v1

      - name: Build no_std lib
        run: cd ci/core-test && cargo build --target ${{ matrix.target }} --color=always

  wasm:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        target:
          - wasm32-unknown-unknown
          - wasm32-unknown-emscripten
          - wasm32-wasi

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - uses: Swatinem/rust-cache@v1

      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: "12"

      - name: Install wasm-pack
        run: |
          export RUST_BACKTRACE=1
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          wasm-pack --version

      - name: Build and Test
        run: cargo run --package xtask -- test
        env:
          TARGET: ${{ matrix.target }}

  cross-targets:
    strategy:
      matrix:
        target:
          - x86_64-sun-solaris

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install cross
        run: cargo install cross

      - uses: Swatinem/rust-cache@v1

      - name: Build static library
        run: cross check --target ${{ matrix.target }}

  check-docs:
    runs-on: ubuntu-latest
    name: Check doc links
    steps:
      - uses: actions/checkout@v2
      - name: Install rust nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - name: Check docs build without warnings
        env:
          RUSTDOCFLAGS: "-D warnings --cfg docsrs"
        run: cargo +nightly doc --all-features --no-deps
